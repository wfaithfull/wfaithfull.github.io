{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/pca-feature-extraction","result":{"data":{"post":{"__typename":"MdxPost","slug":"/pca-feature-extraction","title":"PCA Feature Extraction for Change Detection in Multivariate Streaming Data","date":"28.08.2019","tags":[{"name":"statistics","slug":"statistics"},{"name":"data-science","slug":"data-science"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PCA Feature Extraction for Change Detection in Multivariate Streaming Data\",\n  \"date\": \"2019-08-28T00:00:00.000Z\",\n  \"slug\": \"/pca-feature-extraction\",\n  \"tags\": [\"statistics\", \"data-science\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I get quite a lot of enquiries asking for a code example of the titular paper:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Kuncheva, Ludmila I., and William J. Faithfull. \\\"PCA feature extraction for change detection in multidimensional unlabeled data.\\\" IEEE transactions on neural networks and learning systems 25.1 (2013): 69-80.\")), mdx(\"p\", null, \"So, without further ado, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://colab.research.google.com/drive/1gwzESrd3zqMgsEoqbAf0o2uJgpnWu-fn#scrollTo=vHQQ0PCAMJiD\"\n  }), \"here\"), \" is a jupyter notebook hosted on colab which demonstrates the concept. The core of the python script (sans SPLL implementation, which can be found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/LucyKuncheva/Change-detection\"\n  }), \"here\"), \") is included below in case Google decides to kill colab at some point in the future.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"from sklearn.decomposition import PCA\\nimport numpy as np\\nimport numpy.random as rnd\\nimport matplotlib.pyplot as plt\\n\\n# Make a stream with a change halfway along\\ndef make_stream(stream_length, features):\\n  a = rnd.randn(stream_length // 2, 10)\\n   \\n  b = np.hstack((rnd.randn(stream_length // 2,5), rnd.randn(stream_length // 2, 5) * 50))\\n  stream = np.vstack((a, b))\\n  \\n  # just adding a bit of artificial variance to the data to avoid empty clusters\\n  stream *= rnd.randn(features)\\n  return stream\\n\\nstream = make_stream(500, 10)\\n\\nwindow_size = 50\\nlength = len(stream) - (2 * window_size)\\n\\nstatistic_raw = []\\nstatistic_pca = []\\n\\nfor i in range((window_size * 2), length):\\n  \\n  W1 = stream[i:i+window_size, :]\\n  W2 = stream[1+i+window_size:1+i+(2*window_size), :]\\n  \\n  # This would be much faster with incremental PCA, but this is just PoC...\\n  pca = PCA()\\n  pca.fit(W1)\\n  \\n  # Keep the least variant features\\n  feature_indices = np.where(pca.explained_variance_ratio_ < 0.05)[0]\\n  \\n  if np.size(feature_indices) < 2:\\n    # Guard against empty clusters...\\n    print(\\\"WARN: ({:.2f}) Skipping SPLL as it would fail with empty cluster...\\\".format(i / length))\\n    st_raw = 0\\n    st_pca = 0\\n  else:\\n    # Transform with W1's coefficients, only keep the least variant features\\n    W1_PCA = pca.transform(W1)[:, feature_indices.tolist()]\\n    W2_PCA = pca.transform(W2)[:, feature_indices.tolist()]\\n    \\n    change_raw, _, st_raw = SPLL(W1, W2)\\n    change_pca, _, st_pca = SPLL(W1_PCA, W2_PCA)\\n  \\n  if i % 100 == 0: \\n    print(\\\".\\\", end=\\\"\\\")\\n  \\n  statistic_raw.append(st_raw)\\n  statistic_pca.append(st_pca)\\n  \\n# We see that the feature extraction is beneficial: PCA change score is higher \\n# before the change and lower after.\\nplt.plot(np.array(statistic_pca) - np.array(statistic_raw))\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"I get quite a lot of enquiries asking for a code example of the titular paper: Kuncheva, Ludmila I., and William J. Faithfull. \"PCA featureâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/pca-feature-extraction","formatString":"DD.MM.YYYY"}}}